{"version":3,"sources":["d3Demo.js"],"names":["line_svg","colorSet","sunshineArray","margin","top","right","bottom","left","w","h","legendSpace","console","log","y","d3","scaleLinear","range","x","scaleTime","yAxis","axisLeft","xAxis","axisBottom","tickFormat","timeFormat","citySet","csv","sunshineData","then","data","forEach","d","push","includes","city","drawLineD3","scaleOrdinal","domain","schemeSet2","extent","timeParse","month","parseFloat","sunshine","select","append","attr","call","path","line","currentCity","filter","e","datum","style","legend","selectAll","join","indexOf","text"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAAqD;AACrD,cAAkB;AACA;;;AAElB,IAAIA,QAAJ,EAAiB;;AACjB,IAAIC,QAAJ,EAAiB;;AACjB,IAAIC,aAAa,GAAG,EAApB,EAA0B;AAE1B;;AACA,IAAIC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,KAAK,EAAE,EAAlB;AAAsBC,EAAAA,MAAM,EAAE,EAA9B;AAAkCC,EAAAA,IAAI,EAAE;AAAxC,CAAb;AAAA,IACAC,CAAC,GAAG,OAAOL,MAAM,CAACI,IAAP,GAAcJ,MAAM,CAACE,KAA5B,CADJ;AAAA,IAEAI,CAAC,GAAG,OAAON,MAAM,CAACC,GAAP,GAAaD,MAAM,CAACG,MAA3B,CAFJ;AAGA,IAAII,WAAW,GAAG,GAAlB;AACAC,OAAO,CAACC,GAAR,CAAYT,MAAZ,GAEA;;AACA,IAAIU,CAAC,GAAGC,EAAE,CAACC,WAAH,GACGC,KADH,CACS,CAACP,CAAD,EAAI,CAAJ,CADT,CAAR;AAEA,IAAIQ,CAAC,GAAGH,EAAE,CAACI,SAAH,GACGF,KADH,CACS,CAAC,CAAD,EAAIR,CAAJ,CADT,CAAR;AAEA,IAAIW,KAAK,GAAGL,EAAE,CAACM,QAAH,CAAYP,CAAZ,CAAZ;AACA,IAAIQ,KAAK,GAAGP,EAAE,CAACQ,UAAH,CAAcL,CAAd,EACTM,UADS,CACET,EAAE,CAACU,UAAH,CAAc,IAAd,CADF,CAAZ,EACsC;;AAEtC,IAAIC,OAAO,GAAG,EAAd,EAEA;;AACAX,EAAE,CAACY,GAAH,CAAOC,iBAAP,EAAqBC,IAArB,CAA0B,UAASC,IAAT,EAAe;AACvCA,EAAAA,IAAI,CAACC,OAAL,CAAa,UAASC,CAAT,EAAW;AACtB7B,IAAAA,aAAa,CAAC8B,IAAd,CAAmBD,CAAnB;;AACA,QAAI,CAACN,OAAO,CAACQ,QAAR,CAAiBF,CAAC,CAACG,IAAnB,CAAL,EAA+B;AAC7BT,MAAAA,OAAO,CAACO,IAAR,CAAaD,CAAC,CAACG,IAAf;AACD;AACF,GALD;AAMAC,EAAAA,UAAU;AACX,CARD;;AAUA,SAASA,UAAT,GAAsB;AACpBlC,EAAAA,QAAQ,GAAGa,EAAE,CAACsB,YAAH,GACGC,MADH,CACUZ,OADV,EAEGT,KAFH,CAESF,EAAE,CAACwB,UAFZ,CAAX;AAGArB,EAAAA,CAAC,CAACoB,MAAF,CAASvB,EAAE,CAACyB,MAAH,CAAUrC,aAAV,EAAyB,UAAA6B,CAAC;AAAA,WAAIjB,EAAE,CAAC0B,SAAH,CAAa,IAAb,EAAmBT,CAAC,CAACU,KAArB,CAAJ;AAAA,GAA1B,CAAT;AACA5B,EAAAA,CAAC,CAACwB,MAAF,CAASvB,EAAE,CAACyB,MAAH,CAAUrC,aAAV,EAAyB,UAAA6B,CAAC;AAAA,WAAIW,UAAU,CAACX,CAAC,CAACY,QAAH,CAAd;AAAA,GAA1B,CAAT,EALoB,CAOpB;;AACA3C,EAAAA,QAAQ,GAAGc,EAAE,CAAC8B,MAAH,CAAU,UAAV,EACEC,MADF,CACS,KADT,EAEIC,IAFJ,CAES,IAFT,EAEe,YAFf,EAGIA,IAHJ,CAGS,OAHT,EAGkBtC,CAAC,GAAGL,MAAM,CAACI,IAAX,GAAkBJ,MAAM,CAACE,KAAzB,GAAiCK,WAHnD,EAIIoC,IAJJ,CAIS,QAJT,EAImBrC,CAAC,GAAGN,MAAM,CAACC,GAAX,GAAiBD,MAAM,CAACG,MAJ3C,EAKEuC,MALF,CAKS,GALT,EAMIC,IANJ,CAMS,WANT,EAMsB,eAAe3C,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GANtE,CAAX,CARoB,CAgBpB;;AACAJ,EAAAA,QAAQ,CAAC6C,MAAT,CAAgB,GAAhB,EACWC,IADX,CACgB,WADhB,EAC6B,iBAAiBrC,CAAjB,GAAqB,GADlD,EAEWqC,IAFX,CAEgB,OAFhB,EAEwB,SAFxB,EAGWC,IAHX,CAGgB1B,KAHhB,EAjBoB,CAsBpB;;AACArB,EAAAA,QAAQ,CAAC6C,MAAT,CAAgB,GAAhB,EACWC,IADX,CACgB,OADhB,EACwB,SADxB,EAEWC,IAFX,CAEgB5B,KAFhB,EAvBoB,CA2BpB;;AACA,MAAI6B,IAAI,GAAGhD,QAAQ,CAAC6C,MAAT,CAAgB,GAAhB,EACYC,IADZ,CACiB,IADjB,EACsB,aADtB,CAAX;AAGA,MAAIG,IAAI,GAAGnC,EAAE,CAACmC,IAAH,GACEhC,CADF,CACI,UAAAc,CAAC;AAAA,WAAId,CAAC,CAACH,EAAE,CAAC0B,SAAH,CAAa,IAAb,EAAmBT,CAAC,CAACU,KAArB,CAAD,CAAL;AAAA,GADL,EAEE5B,CAFF,CAEI,UAAAkB,CAAC;AAAA,WAAIlB,CAAC,CAAC6B,UAAU,CAACX,CAAC,CAACY,QAAH,CAAX,CAAL;AAAA,GAFL,CAAX,CA/BoB,CAmCpB;;AACAlB,EAAAA,OAAO,CAACK,OAAR,CAAgB,UAASC,CAAT,EAAY;AACxB,QAAImB,WAAW,GAAGhD,aAAa,CAACiD,MAAd,CAAqB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAClB,IAAF,KAAWH,CAAf;AAAA,KAAtB,CAAlB;AACAiB,IAAAA,IAAI,CAACH,MAAL,CAAY,MAAZ,EACOQ,KADP,CACaH,WADb,EAEOJ,IAFP,CAEY,OAFZ,EAEqB,OAFrB,EAGOA,IAHP,CAGY,GAHZ,EAGiBG,IAHjB,EAIOK,KAJP,CAIa,cAJb,EAI6B,GAJ7B,EAKOA,KALP,CAKa,MALb,EAKqB,MALrB,EAMOR,IANP,CAMY,QANZ,EAMsB7C,QAAQ,CAAC8B,CAAD,CAN9B;AAOH,GATD,EApCoB,CA+CpB;;AACA,MAAIwB,MAAM,GAAGvD,QAAQ,CAAC6C,MAAT,CAAgB,GAAhB,EACUC,IADV,CACe,IADf,EACoB,cADpB,CAAb;AAGAS,EAAAA,MAAM,CAACC,SAAP,CAAiB,MAAjB,EAAyB3B,IAAzB,CAA8BJ,OAA9B,EACKgC,IADL,CACU,MADV,EAEOX,IAFP,CAEY,OAFZ,EAEoB,SAFpB,EAGOA,IAHP,CAGY,GAHZ,EAGgB,GAHhB,EAIOA,IAJP,CAIY,GAJZ,EAIiB,UAAAf,CAAC;AAAA,WAAI,KAAG,KAAIN,OAAO,CAACiC,OAAR,CAAgB3B,CAAhB,CAAX;AAAA,GAJlB,EAKOe,IALP,CAKY,OALZ,EAKqB,EALrB,EAMOA,IANP,CAMY,QANZ,EAMsB,EANtB,EAOOQ,KAPP,CAOa,MAPb,EAOqB,UAAAvB,CAAC;AAAA,WAAI9B,QAAQ,CAAC8B,CAAD,CAAZ;AAAA,GAPtB;AASAwB,EAAAA,MAAM,CAACC,SAAP,CAAiB,MAAjB,EAAyB3B,IAAzB,CAA8BJ,OAA9B,EACKgC,IADL,CACU,MADV,EAEOX,IAFP,CAEY,OAFZ,EAEoB,SAFpB,EAGOA,IAHP,CAGY,GAHZ,EAGiB,GAHjB,EAIOA,IAJP,CAIY,GAJZ,EAIiB,UAAAf,CAAC;AAAA,WAAI,KAAG,KAAIN,OAAO,CAACiC,OAAR,CAAgB3B,CAAhB,CAAX;AAAA,GAJlB,EAKO4B,IALP,CAKY,UAAA5B,CAAC;AAAA,WAAIA,CAAJ;AAAA,GALb,EAMOuB,KANP,CAMa,WANb,EAM0B,MAN1B,EAOOR,IAPP,CAOY,oBAPZ,EAOiC,QAPjC;AAQD","file":"d3Demo.c3cad310.js","sourceRoot":"../src","sourcesContent":["import sunshineData from '../static/sunshine.csv'    // import dataset\n\"use strict\";     // the code should be executed in \"strict mode\".\n                  // With strict mode, you can not, for example, use undeclared variables\n\nvar line_svg;    // used for svg later\nvar colorSet;    // used for color scheme later\nvar sunshineArray = [];   // used to store data later\n\n// preparation for our svg\nvar margin = { top: 50, right: 35, bottom: 50, left: 50 },\nw = 650 - (margin.left + margin.right),\nh = 520 - (margin.top + margin.bottom);\nvar legendSpace = 130;\nconsole.log(margin);\n\n// preparation for our x/y axis\nvar y = d3.scaleLinear()\n          .range([h, 0]);\nvar x = d3.scaleTime()\n          .range([0, w]);\nvar yAxis = d3.axisLeft(y);\nvar xAxis = d3.axisBottom(x)\n  .tickFormat(d3.timeFormat(\"%b\"));   // %b: abbreviated Month format (Mon, Jun..)\n\nvar citySet = [];\n\n// once finish processing data, make a graph!\nd3.csv(sunshineData).then(function(data) {\n  data.forEach(function(d){\n    sunshineArray.push(d);\n    if (!citySet.includes(d.city)) {\n      citySet.push(d.city);\n    }\n  })\n  drawLineD3();\n});\n\nfunction drawLineD3() {\n  colorSet = d3.scaleOrdinal()\n               .domain(citySet)\n               .range(d3.schemeSet2);\n  x.domain(d3.extent(sunshineArray, d => d3.timeParse(\"%b\")(d.month)));\n  y.domain(d3.extent(sunshineArray, d => parseFloat(d.sunshine)));\n\n  // create our svg\n  line_svg = d3.select('#d3-demo')\n              .append('svg')\n                .attr(\"id\", \"line-chart\")\n                .attr(\"width\", w + margin.left + margin.right + legendSpace)\n                .attr(\"height\", h + margin.top + margin.bottom)\n              .append('g')\n                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  // append x axis to svg\n  line_svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + h + \")\")\n            .attr(\"class\",\"myXaxis\")\n            .call(xAxis);\n\n  // append y axis to svg\n  line_svg.append(\"g\")\n            .attr(\"class\",\"myYaxis\")\n            .call(yAxis);\n\n  // create a group to store lines for our line chart\n  var path = line_svg.append('g')\n                        .attr(\"id\",\"paths-group\");\n\n  var line = d3.line()\n              .x(d => x(d3.timeParse(\"%b\")(d.month)))\n              .y(d => y(parseFloat(d.sunshine)));  \n\n  // make a line for each city\n  citySet.forEach(function(d) {\n      var currentCity = sunshineArray.filter(e => e.city === d);\n      path.append(\"path\")\n            .datum(currentCity)\n            .attr(\"class\", \"lines\")\n            .attr('d', line)\n            .style(\"stroke-width\", 2.5)\n            .style(\"fill\", \"none\")\n            .attr(\"stroke\", colorSet(d))\n  });\n\n  // add legend\n  var legend = line_svg.append('g')\n                        .attr(\"id\",\"legend-group\");\n\n  legend.selectAll(\"rect\").data(citySet)\n      .join(\"rect\")\n        .attr(\"class\",\"legends\")\n        .attr(\"x\",600)\n        .attr(\"y\", d => 25+30*(citySet.indexOf(d)))\n        .attr(\"width\", 10)\n        .attr(\"height\", 10)\n        .style(\"fill\", d => colorSet(d));\n\n  legend.selectAll(\"text\").data(citySet)\n      .join(\"text\")\n        .attr(\"class\",\"legends\")\n        .attr(\"x\", 620)\n        .attr(\"y\", d => 30+30*(citySet.indexOf(d)))\n        .text(d => d)\n        .style(\"font-size\", \"15px\")\n        .attr(\"alignment-baseline\",\"middle\");\n}\n\n\n"]}